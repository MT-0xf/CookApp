type Query {
    getUsers: [User]
    getRecipeData: [RecipeData]
    getRecipeCookProcedures: [RecipeData]
}

type Mutation {
    registerIngredients(ingredients: [InputIngredient]): RegisterIngredientResponse
    registerRecipeData(inputCreateRecipe: InputCreateRecipe): Boolean
}

type User {
    id: ID!
    name: String!
    password: String!
}

type RecipeData {
    recipeId: ID!
    dishName: String!
    img: String!
    ingredients: [Ingredient]
    cookProcedures: [CookProcedure]
}

type Ingredient {
    recipeId: ID!
    ingredientId: ID!
    amount: String!
    ingredientMaster: IngredientMaster!
}


type IngredientMaster {
    ingredientId: ID!
    ingredientName: String!
}

type CookProcedure {
    recipeId: ID!
    orderNumber: Int!
    method: String!
    img: String!
}

type RegisterIngredientResponse {
    ingredients: [Ingredient]
    isRegister: Boolean!
    errorMessage: String
}

input InputRecipeData {
    recipeId: String
    dishName: String!
    img: String!
}

type InputIngredient {
    recipeId: ID
    ingredientId: ID
    ingredientName: String!
    amount: String!
}

input InputCookProcedure {
    recipeId: String
    orderNumber: Int
    method: String!
    img: String!
}

input InputIngredient {
    recipeId: ID
    ingredientId: ID
    ingredientName: String!
    amount: String!
}

input InputCreateRecipe {
    recipeData: InputRecipeData
    ingredients: [InputIngredient]
    procedures: [InputCookProcedure]
}

